#  Sample Boost.Log configuration file.  It is written using the INI
#  format and has two primary sections:  Core and Sinks.
#
# As a general note, each sink is configured to use its own format.
# Attributes that should be included in the output are specified between
# the percent signs ("%").  Some attributes also have format arguments which
# control how the attribute will be represented. For example, the "Severity"
#  attribute has arguments "align" and "brackets" that control whether the
# severity should be left-aligned with padded spaces to the right and whether
# it should be surrounded by brackets.
#
#  See the documentation here
#  https://www.boost.org/doc/libs/1_63_0/libs/log/doc/html/log/detailed/utilities.html#log.detailed.utilities.setup
#

# Core settings that will apply to every log record
[Core]
DisableLogging=false
Filter="%Severity% >= info"

#  Create a sink that will log all records with severity of "warning" or higher
#  to the console
[Sinks.Console]
Destination=Console
Filter="%Severity >= warning"
Format="[%TimeStamp%] %Severity(align=true, brackets=true)%  (%Scope%) %Message%"

#  Create a sink that will log all records to a rotating file called "All-000.log"
#  where the numeric suffix increments as the file rotates.  The max file size is
#  set to 10MB.  Log records are also written to this disk asynchronously, so the user should
#  call the `tmns::log::flush()` function at the end to ensure all records make it
#  to the file.
#
[Sinks.All]
Destination=TextFile
FileName="All-%3N.log"
RotationSize=10485760
Format="[%TimeStamp%] %Severity(align=true, brackets=true)%  (%Scope%)  %Message%"
Asynchronous=true

#  Create a sink that will log all records from the scope "Apple" to a rotating file called
#  "Apple-000.log".  Same functionality as previous.
[Sinks.Apple]
Destination=TextFile
FileName="Apple-%3N.log"
RotationSize=10485760
Filter="%Scope% contains \"Apple\""
Format="[%TimeStamp%] %Severity(align=true)%  (%Scope%)  %Message%"
Asynchronous=true

#  Create a sink that will log all records from the scope "Orange" to a rotating
#  file called "Orange-000.log".  Similar rules as previous, but "AutoFlush" is set
#  to true. It is async, so still call flush, but it "should" still work.
[Sinks.Orange]
Destination=TextFile
FileName="Orange-%3N.log"
RotationSize=10485760
Filter="%Scope% contains \"Orange\""
Format="[%TimeStamp(format=\"%Y-%m-%d\")%] %Severity(align=true)%  (%Scope%)  %Message%"
Asynchronous=true
AutoFlush=true

#  Create a sink that will log all records matching a more complicated filter.
#  This example is meant to demonstrate the power of Boost.Log filtering.  See the
#  Boost.Log documentation on filters for more information.
[Sinks.All]
Destination=TextFile
FileName="ComplexFilter-%3N.log"
RotationSize=10485760
Filter="(%Scope% contains \"Apple\" and %Severity% >= error) or (%Scope% contains \"Orange\" and %Severity% >= info) or (not (%Scope% contains \"Apple\") and not (%Scope% contains \"Orange\"))"
